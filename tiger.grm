%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yydebug = 0;
int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE UMINUS

%nonassoc OF
%nonassoc ID
%nonassoc WHILE DO FOR
%nonassoc LBRACK
%nonassoc ENDIF
%nonassoc ELSE
%nonassoc THEN


%left ASSIGN
%left AND OR
%left EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%start program

%%

/* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 */

program:	exp

exp: STRING
      | INT
      | NIL
      | MINUS exp %prec UMINUS
      | lvalue 
      | lvalue ASSIGN exp
      | exp PLUS  exp
      | exp MINUS exp
      | exp TIMES exp
      | exp DIVIDE exp
      | exp EQ  exp
      | exp NEQ exp
      | exp LT  exp
      | exp LE  exp
      | exp GT  exp
      | exp GE  exp
      | exp AND exp
      | exp OR  exp
      | ID LPAREN exp_list RPAREN
      | LPAREN exp_seq RPAREN
      | ID LBRACE field_list RBRACE
      | ID LBRACK exp RBRACK OF exp
      | IF exp THEN exp %prec ENDIF
      | IF exp THEN exp ELSE exp
      | WHILE exp DO exp 
      | FOR ID ASSIGN exp TO exp DO exp
      | BREAK
      | LET decl_list IN exp_seq END

exp_list: 
      | exp 
      | exp_list COMMA exp


exp_seq: exp
      | exp SEMICOLON exp_seq

field_list: ID EQ exp
      | field_list COMMA ID EQ exp

lvalue: ID 
      | lvalue DOT ID 
      | lvalue LBRACK exp RBRACK
      | ID LBRACK exp RBRACK

decl: type_decl
      | var_decl
      | function_decl
      
decl_list: decl
          | decl_list decl

type_decl: TYPE ID EQ type

type: ID
      | LBRACE type_fields RBRACE
      | ARRAY OF ID

type_fields: 
      | type_field
      | type_fields COMMA type_field

type_field: ID COLON ID

var_decl: VAR ID var_id_suffix
        
var_id_suffix: ASSIGN exp
        | COLON ID ASSIGN exp

function_decl: FUNCTION ID LPAREN type_fields RPAREN function_id_suffix

function_id_suffix: EQ exp
            | COLON ID EQ exp