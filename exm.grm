open Absyn;

%%
%name Tiger

%term EOF
    | ID of string
    | INT of int
    | STRING of string
    | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
    | LBRACE | RBRACE | DOT
    | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
    | AND | OR | ASSIGN
    | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
    | BREAK | NIL
    | FUNCTION | VAR | TYPE
    | UMINUS | DEC

%nonterm program         of exp
       | var             of var
       | vartail         of var -> var
       | exp             of exp
       | explist         of (exp * pos) list
       | opexp           of exp
       | callexp         of exp
       | callexplist     of exp list
       | recordexp       of exp
       | recordexplist   of (symbol * exp * pos) list
       | recordexpfields of (symbol * exp * pos)
       | seqexp          of exp
       | seqexplist      of (exp * pos) list
       | assignexp       of exp
       | ifthenelseexp   of exp
       | ifthenexp       of exp
       | whileexp        of exp
       | forexp          of exp
       | arrayexp        of exp
       | letexp          of exp
       | dec             of dec
       | declist         of dec list
       | fundec          of fundec
       | fundeclist      of fundec list
       | vardec          of dec
       | typedec         of {name: symbol, ty: ty, pos: pos}
       | typedeclist     of {name: symbol, ty: ty, pos: pos} list
       | ty              of ty
       | tyfield         of field
       | tyfieldlist     of field list

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
         DO OF NIL

(* This is used as the type and function declaration precedence
   so it does not interfere with the tokens type and function themselves *)
%nonassoc DEC
%nonassoc TYPE FUNCTION
(* Left brackets bind tighter than IDs so they always get shifted to. *)
%nonassoc ID
%nonassoc LBRACK
(* Handles the dangling else problem, and makes loops bind looser than
   most operations. *)
%nonassoc THEN
%nonassoc ELSE DO
(* An assignment is a valueless expression, and array creation can't chain,
   and these operations bind weaker than general arithmetic. *)
%nonassoc ASSIGN OF
(* The comparison operations are non-associative *)
%left OR AND
%nonassoc EQ NEQ LE LT GT GE
(* This follows from common mathematics *)
%left PLUS MINUS
%left TIMES DIVIDE
(* Unary minus binds the tightest of all. *)
%left UMINUS

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program : exp (exp)

var : ID vartail              (vartail(SimpleVar(Symbol.symbol(ID), IDleft)))

vartail: DOT ID vartail             (fn tail => FieldVar(vartail tail, Symbol.symbol(ID), IDleft))
       | LBRACK exp RBRACK vartail  (fn tail => SubscriptVar(vartail tail, exp, LBRACKleft))    
       |                            (fn tail => tail)

exp: var                       (VarExp(var))
   | NIL                       (NilExp)
   | INT                       (IntExp(INT))
   | MINUS exp %prec UMINUS    (OpExp { left=IntExp(0), oper=MinusOp, right=exp, pos=MINUSleft })
   | STRING                    (StringExp(STRING, STRINGleft))
   | callexp                   (callexp)
   | opexp                     (opexp)
   | recordexp                 (recordexp)
   | seqexp                    (seqexp)
   | assignexp                 (assignexp)
   | ifthenelseexp             (ifthenelseexp)
   | ifthenexp                 (ifthenexp)
   | whileexp                  (whileexp)
   | forexp                    (forexp)
   | BREAK                     (BreakExp(BREAKleft))
   | arrayexp                  (arrayexp)
   | letexp                    (letexp)

explist: explist SEMICOLON exp    ((exp, explistleft) :: explist)
       | exp                      ([(exp, expleft)])
       |                          ([])


opexp: exp PLUS exp      (OpExp { left=exp1,oper=PlusOp,   right=exp2,pos=exp1left })
     | exp MINUS exp     (OpExp { left=exp1,oper=MinusOp,  right=exp2,pos=exp1left })
     | exp TIMES exp     (OpExp { left=exp1,oper=TimesOp,  right=exp2,pos=exp1left })
     | exp DIVIDE exp    (OpExp { left=exp1,oper=DivideOp, right=exp2,pos=exp1left })
     | exp EQ exp        (OpExp { left=exp1,oper=EqOp,     right=exp2,pos=exp1left })
     | exp NEQ exp       (OpExp { left=exp1,oper=NeqOp,    right=exp2,pos=exp1left })
     | exp LT exp        (OpExp { left=exp1,oper=LtOp,     right=exp2,pos=exp1left })
     | exp LE exp        (OpExp { left=exp1,oper=LeOp,     right=exp2,pos=exp1left })
     | exp GT exp        (OpExp { left=exp1,oper=GtOp,     right=exp2,pos=exp1left })
     | exp GE exp        (OpExp { left=exp1,oper=GeOp,     right=exp2,pos=exp1left })
     | exp AND exp       (IfExp { test=exp1,then'=exp2,      else'=Option.SOME(IntExp(0)),pos=exp1left })
     | exp OR exp        (IfExp { test=exp1,then'=IntExp(1), else'=Option.SOME(exp2),     pos=exp1left })


callexp: ID LPAREN callexplist RPAREN    (CallExp { func=Symbol.symbol(ID),
                                                    args=List.rev(callexplist),
                                                    pos=IDleft })

callexplist: callexplist COMMA exp    (exp :: callexplist)
           | exp                      ([exp])
           |                          ([])


recordexp: ID LBRACE recordexplist RBRACE    (RecordExp { fields=List.rev(recordexplist),
                                                          typ=Symbol.symbol(ID),
                                                          pos=IDleft })

recordexplist: recordexplist COMMA recordexpfields    (recordexpfields :: recordexplist)
             | recordexpfields                        ([recordexpfields])
             |                                        ([])

recordexpfields: ID EQ exp    ((Symbol.symbol(ID), exp, IDleft))


seqexp: LPAREN seqexplist RPAREN    (SeqExp(List.rev(seqexplist)))

seqexplist: seqexplist SEMICOLON exp    ((exp, expleft) :: seqexplist)
          | exp                         ([(exp, expleft)])
          |                             ([])


assignexp: var ASSIGN exp    (AssignExp { var=var,
                                          exp=exp,
                                          pos=varleft })


ifthenelseexp: IF exp THEN exp ELSE exp    (IfExp { test=exp1,
                                                    then'=exp2,
                                                    else'=Option.SOME(exp3),
                                                    pos=IFleft })


ifthenexp: IF exp THEN exp    (IfExp { test=exp1,
                                       then'=exp2,
                                       else'=Option.NONE,
                                       pos=IFleft })


whileexp: WHILE exp DO exp    (WhileExp { test=exp1,
                                          body=exp2,
                                          pos=WHILEleft })


forexp: FOR ID ASSIGN exp TO exp DO exp    (ForExp { var=Symbol.symbol(ID),
                                                     escape=ref true,
                                                     lo=exp1,
                                                     hi=exp2,
                                                     body=exp3,
                                                     pos=FORleft })


arrayexp: ID LBRACK exp RBRACK OF exp (ArrayExp { typ=Symbol.symbol(ID),
                                                  size=exp1,
                                                  init=exp2,
                                                  pos=IDleft })


letexp: LET declist IN explist END (LetExp { decs=List.rev declist,
                                             body=SeqExp(List.rev(explist)),
                                             pos=LETleft })


dec: fundeclist    %prec DEC (FunctionDec(List.rev(fundeclist)))
   | vardec                  (vardec)
   | typedeclist   %prec DEC (TypeDec(List.rev(typedeclist)))

declist: declist dec    (dec :: declist)
       | dec            ([dec])


fundec: FUNCTION ID LPAREN tyfieldlist RPAREN EQ exp             ({ name=Symbol.symbol(ID),
                                                                    params=List.rev(tyfieldlist),
                                                                    result=Option.NONE,
                                                                    body=exp,
                                                                    pos=FUNCTIONleft })
      | FUNCTION ID LPAREN tyfieldlist RPAREN COLON ID EQ exp    ({ name=Symbol.symbol(ID1),
                                                                    params=List.rev(tyfieldlist),
                                                                    result=Option.SOME(Symbol.symbol(ID2), ID2left),
                                                                    body=exp,
                                                                    pos=FUNCTIONleft })

fundeclist: fundeclist fundec    (fundec :: fundeclist)
          | fundec               ([fundec])


vardec: VAR ID ASSIGN exp            (VarDec { name=Symbol.symbol(ID),
                                               escape=ref true,
                                               typ=Option.NONE,
                                               init=exp,
                                               pos=VARleft })
     | VAR ID COLON ID ASSIGN exp    (VarDec { name=Symbol.symbol(ID1),
                                               escape=ref true,
                                               typ=Option.SOME(Symbol.symbol(ID2), ID2left),
                                               init=exp,
                                               pos=VARleft })


typedec: TYPE ID EQ ty    ({ name=Symbol.symbol(ID),
                             ty=ty,
                             pos=TYPEleft })


typedeclist: typedeclist typedec    (typedec :: typedeclist)
           | typedec                ([typedec])

ty: ID                           (NameTy(Symbol.symbol(ID), IDleft))
  | LBRACE tyfieldlist RBRACE    (RecordTy(List.rev(tyfieldlist)))
  | ARRAY OF ID                  (ArrayTy(Symbol.symbol(ID), ARRAYleft))


tyfield: ID COLON ID    ({ name=Symbol.symbol(ID1),
                           escape=ref true,
                           typ=Symbol.symbol(ID2),
                           pos=ID1left })

tyfieldlist: tyfieldlist COMMA tyfield    (tyfield :: tyfieldlist)
           | tyfield                      ([tyfield])
           |                              ([])